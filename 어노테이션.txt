선언된 객체를 가져와서 의존성 주입을 하는 어노테이션
@Resouce() @Autowired

Member m = new Member();
위의 코드로 객체를 생성하면 클래스 간 결합도가 증가하는 문제점이 야기.


스프링에서 객체 생성을 위해 도입된 개념
IOC(inversion of controll : 제어의 역전)
: 프로그램 구현에 필요한 객체를 개발자가 아닌 스프링이 생성하는 것

DI(Dependency Injection : 의존성 주입)
: 스프링이 만들어준 객체를 개발자가 사용하는 방법

스프링이 객체를 알아서 생성할 수 있도록 어노테이션을 사용한다.
어노테이션을 사용하여 객체를 생성하는 절차
1. 모든 클래스를 스프링이 객체를 만들어 주는건 아님!
	반드시 객체를 만드려는 클래스는 기본 패키지 안에 있어야 한다.
	기본 패키지 밖에서 선언된 클래스들은 스프링이 객체 생성을 해줄 수 없다.

2. 클래스명에 객체 생성 어노테이션을 선언하면 자동으로 객체가 만들어진다.
객체 생성을 해주는 어노테이션
@Component
@Controller @Service() @Configuration @Repository (JPA)

@Component
class Aaa{} -> Aaa aaa = new Aaa();

@Service("test")
class Aaa{} -> Aaa test = new Aaa();

DI를 통한 의존성 주입 방법(생성된 객체 사용 방법)
생성된 객체를 사용할 때에도 어노테이션을 적용해서 사용한다.
@Autowired	@Resource

@Autowired : 만들어진 객체와 의존성 주입하려는 객체의 자료형을 비교하여 객체 주입

@Autowired의 한계 : 의존성 주입을 할 수 있는 객체가 2개 이상이면 오류발생 ex ) 상속

@Component
class A {} -> A a = new A

@Component
class B extends A {} -> B b = new B

@Component
class C {} -> C c = new C

@Autowired
private A a; //오류 (쓸수있는 객체가 A,B두개이기때문에)

만들어진 객체의 이름을 통해 의존성 주입
@Resource(name="a")
private A a; // 가능
